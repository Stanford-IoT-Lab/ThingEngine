// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-

const events = require('events');
const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3');
const async = require('async');
const util = require('util');

function arrayEqual(a, b) {
    if (typeof a !== 'object' || typeof b !== 'object')
        return false;
    if (a.length !== b.length)
        return false;

    return a.every(function(e, i) { return a === b[i]; });
}

function safeMkdirSync(fs, dir) {
    try {
        fs.mkdirSync(dir);
    } catch(e) {
        if (e.code !== 'EEXIST')
            throw e;
    }
}

function OmStore(client) {
    this._client = client;

    var instance = client._instance;
    var filename = path.join(platform.getWritableDir(), 'omlet-' + instance + '.db');

    var callback = function(err, done) {
        if (err) {
            console.error('Error opening Omlet sqlite db: ' + err);
            return;
        }

        this._client.events._notify(OmEvent.prototype.DB_LOADED);
    }.bind(this);

    if (!fs.existsSync(filename)) {
        this._db = new sqlite3.Database(filename, sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE,
                                        callback);
        this._db.exec(fs.readFileSync(path.join(path.dirname(module.filename),
                                                'schema.sql')));
    } else {
        this._db = new sqlite3.Database(filename, sqlite3.OPEN_READWRITE, callback);
    }

    this._pendingOpens = {};
    this._tables = {};
}

OmStore.prototype.getObjectId = function(object) {
	return object.rowid;
}

const TABLE_CONSTRUCTOR = {
    'feeds': Feeds,
    'accounts': Accounts,
    'identity-hashes': IdentityHashes,
    'blobs': Blobs,
    'messages': Messages,
};

OmStore.prototype.openTable = function(name, key, defaultObject, cb) {
    if (!this._tables[name]) {
        if (name.startsWith('feed-object-'))
            var table = new FeedObjects(this._db, parseInt(name.substr('feed-object-'.length)));
        else if (name in TABLE_CONSTRUCTOR)
            var table = new (TABLE_CONSTRUCTOR[name])(this._db);
        else
            throw new Error('Invalid table name ' + name);

        this._tables[name] = table;
    }

    cb(this._tables[name]);
}

function OmTable(db) {
    events.EventEmitter.call(this);

    this._db = db;
    this._name = null;
    this._key = null;
}

util.inherits(OmTable, events.EventEmitter);

OmTable.prototype.getObjectById = function(id, cb) {
    return this._db.get("select * from " + this._name + " where rowid = ?", id,
                        function(err, value) {
                            cb(this._massage(value));
                        }.bind(this));
};

OmTable.prototype.getObjectByKey = function(key, cb) {
    return this._dbget("select * from " + this._name + " where " + this._key " = ?", key,
                       function(err, value) {
                           this._massage(value, cb);
                       }.bind(this))
};

OmTable.prototype._massage = function(row, cb) {
    if (row === undefined)
        return cb(null);
    else
        return cb(row);
};

OmTable.prototype.getOrCreateObject = function(key, cb, details) {
    this.getObjectByKey(key, function(existing) {
	if (existing != null) {
	    if (typeof(cb) == 'function') {
		cb(existing, true);
	    }
	} else {
            this.insert(details, function(obj) {
                cb(obj, false);
            });
        }
    }.bind(this));
};

function Feeds(db) {
    OmTable.call(this, db);
    this._name = 'feeds';
    this._key = 'identifier';
}

util.inherits(Feeds, OmTable);

Feeds.prototype._massage = function(row, cb) {
    if (row === undefined)
        return cb(null);

    this._db.all("select * from feed_member where feedId = ?", row.id, function(err, members) {
        row.members = members.map(function(m) { return m.accountId; });
        this._db.all("select * from feed_invitation where feedId = ?", row.id, function(err, invitations) {
            row.invitations = invitations.map(function(i) { return i.identityHash; });

            row._cached = { members: row.members.slice(), invitations: row.invitations.slice() };
            cb(row);
        });
    });
}

Feeds.prototype.insert = function(o, cb) {
    if (typeof o.toRaw == 'function')
	o = o.toRaw();

    var obj = {
        name: '',
        specifiedName: null,
        specifiedThumbnailHash: null,
        renderableTime: 0,
        messageCount: 0,
        _syncMask: 31,
        newestFromService: 0,
        members: [],
        invitations: [],
    };

    for (var k in o)
        obj[k] = o[k];

    var members = obj.members;
    var invitations = obj.invitations;

    var db = this._db;
    var self = this;
    db.exec("insert into feeds(identifier, name, specifiedName, specifiedThumbnailHash, " +
            "renderableTime, messageCount, _syncMask, newestFromService) values(?,?,?,?,?,?,?,?)",
            obj.identifier, obj.name, obj.specifiedName, obj.specifiedThumbnailHash,
            obj.renderableTime, obj.messageCount, obj._syncMask, obj.newestFromService, function(err) {
                obj.rowid = this.lastID;
                members.forEach(function(m) {
                    db.exec("insert into feed_member(feedId, accountId) values (?,?)", obj.rowid, m);
                });
                invitations.forEach(function(i) {
                    db.exec("insert into feed_invitation(feedId, identityHash) values (?,?)", obj.rowid, m);
                });

                obj._cached = { members: obj.members.slice(), invitations: obj.invitations.slice() };

                self.emit('insert', obj);

                if (typeof cb === 'function')
                    cb(obj);
            });
}

Feeds.prototype.update = function(o, cb) {
    if (typeof o.toRaw == 'function')
	o = o.toRaw();

    var db = this._db;
    var self = this;
    db.exec("update feeds set name = ?, specifiedName = ?, specifiedThumbnailHash = ?, " +
            "renderableTime = ?, messageCount = ?, _syncMask = ?, newestFromService = ? where" +
            "rowid = ?", o.name, o.specifiedName, o.specifiedThumbnailHash, o.renderableTime,
            o.messageCount, o._syncMask, o.newestFromService, o.rowid, function(err) {
                if (!o._cached)
                    o._cached = { members: [], invitations: [] };

                if (!arrayEqual(o._cached.members, o.members)) {
                    db.exec("delete from feed_member where feedId = ?", o.rowid, function(err) {
                        o.members.forEach(function(m) {
                            db.exec("insert into feed_member(feedId, accountId) values (?,?)", obj.rowid, m);
                        });
                    });

                    o._cached.members = o.members.slice();
                }

                if (!arrayEqual(o._cached.invitations, o.invitations)) {
                    db.exec("delete from feed_invitation where feedId = ?", o.rowid, function(err) {
                        o.members.forEach(function(m) {
                            db.exec("insert into feed_invitation(feedId, identityHash) values (?,?)", obj.rowid, m);
                        });
                    });

                    o._cached.invitations = o.invitations.slice();
                }

                self.emit('update', o);

                if (typeof cb === 'function')
                    cb(o);
            });
}

function Accounts(db) {
    OmTable.call(this, db);
    this._name = 'accounts';
    this._key = 'account';
}

util.inherits(Accounts, OmTable);

Accounts.prototype.insert = function(o, cb) {
    if (typeof o.toRaw === 'function')
        o = o.toRaw();

    var obj = {
        name: '',
        thumbnailHash: null,
        hasAppTime: null,
        profileVersion: 0,
        owned: false,
        upToDate: false
    };

    for (var k in o)
        obj[k] = o[k];

    var db = this._db;
    var self = this;
    db.exec("insert into accounts(account, name, thumbnailHash, hasAppTime, profileVersion," +
            "owned,upToDate) values(?,?,?,?,?,?,?)", obj.account, obj.name, obj.thumbnailHash,
            obj.hasAppTime, obj.profileVersion, obj.owned, obj.upToDate, function(err) {
                obj.rowid = this.lastID;

                self.emit('insert', obj);

                if (typeof cb === 'function')
                    cb(obj);
            });
}

Accounts.prototype.update = function(o, cb) {
    if (typeof o.toRaw === 'function')
        o = o.toRaw();

    var db = this._db;
    var self = this;
    db.exec("update accounts set name = ?, thumbnailHash = ?, hasAppTime = ?, profileVersion = ?," +
            "owned = ?, upToDate = ? where rowid = ?", o.name, o.thumbnailHash, o.hasAppTime,
            o.profileVersion, o.owned, o.upToDate, o.rowid, function(err) {
                self.emit('update', o);

                if (typeof cb === 'function')
                    cb(o);
            });
}

function IdentityHashes() {
    OmTable.call(this);

    this._name = 'identity_hashes';
    this._key = 'identity_hash';
}

util.inherits(IdentityHashes, OmTable);

IdentityHashes.prototype.insert = function(o, cb){
    if (typeof o.toRaw === 'function')
        o = o.toRaw();

    var db = this._db;
    var self = this;
    db.exec("insert into identity_hashes(identityHash, accountId) values(?,?)",
            o.identityHash, o.accountId, function(err) {
                obj.rowid = this.lastID;

                self.emit('insert', obj);

                if (typeof cb === 'function')
                    cb(obj);
            });
}

IdentityHashes.prototype.update = function(o, cb) {
    

module.exports = OmStore;
